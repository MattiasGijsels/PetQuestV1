@page "/"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Http
@using PetQuestV1.Data
@using PetQuestV1.Components.Account
@using PetQuestV1.Components.Account.Shared

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Home> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>PetQuest</PageTitle>

<div class="petquest-homepage">

    <!-- Main content container -->
    <div class="main-content">
        <!-- Login card with integrated cat image -->
        <div class="login-card">
            <div class="card-content">
                <!-- Login form on the left -->
                <div class="login-section">
                    <StatusMessage Message="@errorMessage" />
                    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="home-login">
                        <DataAnnotationsValidator />
                        <h2 class="login-title">Log in</h2>
                        <hr />
                        <ValidationSummary class="text-danger" role="alert" />

                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                            <label for="email" class="form-label">Email</label>
                            <ValidationMessage For="() => Input.Email" class="text-danger" />
                        </div>

                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                            <label for="password" class="form-label">Password</label>
                            <ValidationMessage For="() => Input.Password" class="text-danger" />
                        </div>

                        <div class="checkbox mb-3">
                            <label class="form-label">
                                <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                                Remember me
                            </label>
                        </div>

                        <div class="mb-3">
                            <button type="submit" class="btn btn-primary w-100 login-btn">Log in</button>
                        </div>

                        <div class="login-links">
                            <p><a href="Account/ForgotPassword">Forgot your password?</a></p>
                            <p><a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a></p>
                            <p><a href="Account/ResendEmailConfirmation">Resend email confirmation</a></p>
                        </div>
                    </EditForm>
                </div>

                <!-- Cat image on the right inside the card -->
                <div class="cat-section">
                    <img src="images/PetQuestLogoOnlySmall.jpg" alt="PetQuest Cat" class="cat-image" />
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .petquest-homepage {
        min-height: 100vh;
        background-color: #ffffff;
        padding: 1rem 0;
        display: flex;
        justify-content: center;
        align-items: flex-start;
        padding-top: 6rem;
    }

    .main-content {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        max-width: 900px;
        margin: 0 auto;
        padding: 0 2rem;
    }

    .login-card {
        background: white;
        border: 2px solid #1f5d9f;
        border-radius: 12px;
        padding: 2rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 800px;
    }

    .card-content {
        display: flex;
        gap: 2rem;
        align-items: center;
        padding-top: 1rem;
    }

    .divider {
        width: 1px;
        background-color: #dee2e6;
        align-self: stretch;
        margin: 0 1rem;
    }

    .login-section {
        flex: 1;
        min-width: 350px;
    }

    .login-title {
        text-align: center;
        color: #333;
        margin-bottom: 1rem;
        font-size: 1.5rem;
    }

    .login-btn {
        background-color: #1f5d9f;
        border-color: #1f5d9f;
        font-weight: 500;
        padding: 0.75rem;
        border-radius: 6px;
        transition: all 0.2s ease;
    }

        .login-btn:hover {
            background-color: #174a82;
            border-color: #174a82;
            transform: translateY(-1px);
        }

    .login-links {
        text-align: center;
        margin-top: 1rem;
    }

        .login-links a {
            color: #1f5d9f;
            text-decoration: none;
        }

            .login-links a:hover {
                color: #174a82;
                text-decoration: underline;
            }

    .cat-section {
        flex: 0 0 250px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        gap: 1.5rem;
    }

    .cat-image {
        max-width: 100%;
        height: auto;
        max-height: 300px;
        border-radius: 8px;
    }

    .register-section {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;
    }

    .or-text {
        margin: 0;
        color: #666;
        font-weight: 500;
    }

    .register-btn {
        background-color: #6c757d;
        border-color: #6c757d;
        color: white;
        padding: 0.5rem 1.5rem;
        border-radius: 6px;
        font-weight: 500;
        transition: all 0.2s ease;
        cursor: pointer;
    }

        .register-btn:hover {
            background-color: #5a6268;
            border-color: #5a6268;
            transform: translateY(-1px);
        }

    /* Responsive design */
    @@media (max-width: 768px) {
        .card-content

    {
        flex-direction: column;
        gap: 2rem;
    }

    .login-section {
        min-width: auto;
        width: 100%;
    }

    .cat-section {
        flex: none;
    }

    .main-content {
        padding: 0 1rem;
    }

    .cat-image {
        max-height: 150px;
    }

    }
</style>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");

            // Check if ReturnUrl is set and if it's a local URL
            if (!string.IsNullOrEmpty(ReturnUrl) && IsLocalUrl(ReturnUrl))
            {
                RedirectManager.RedirectTo(ReturnUrl);
            }
            else
            {
                RedirectManager.RedirectTo("/mypets"); // Redirect to /mypets by default
            }
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
              "Account/LoginWith2fa",
              new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    // Helper method to check if a URL is local
    private bool IsLocalUrl(string? url)
    {
        if (string.IsNullOrEmpty(url))
        {
            return false;
        }
        return (url.StartsWith("/") && !url.StartsWith("//")) ||
               (url.StartsWith(NavigationManager.BaseUri) && !url.Contains("://"));
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}